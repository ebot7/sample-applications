service: ebot7-sample-channel-integration

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  # e-bot7 Applications work with any framework and cloud provider
  # These examples use Serverless, Node, and AWS Lambdas
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'prod'}
  region: eu-central-1
  endpointType: REGIONAL
  # This sample application is using AWS Secrets Manager to store its access token.
  # You can use the secure storage mechanism of your choice.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - arn:aws:secretsmanager:eu-central-1:060817847094:secret:${self:provider.stage}/SAMPLE_APPLICATIONS/CREDENTIALS-*
functions:
  # This function is invoked by the external platform.
  # It causes a message to be sent to e-bot7
  receiveInboundMessage:
    handler: functions/inbound.handler
    events:
      - http:
          method: post
          path: receive-inbound
    environment:
      token: ${self:provider.stage}/SAMPLE_APPLICATIONS/CREDENTIALS
      apiBaseUrl: "https://api.staging.e-bot7.de"
  # This function is invoked by Application Platform.
  # It causes a message to be sent to the external platform.
  sendOutboundMessage:
    handler: functions/outbound.handler
    events:
      - http:
          method: post
          path: send-outbound
    environment:
      token: ${self:provider.stage}/SAMPLE_APPLICATIONS/CREDENTIALS
      secretAccessKey: TODO # Replace with SecretAccessKey
      accessKeyId: TODO # Replace with accessKeyId
      awsDynamoTable: facebookAuth

  applicationInstall:
    handler: functions/applicationInstall.handler
    events:
      - http:
        method: post
        path: application-install
    environment: 
      ebot7_install_url: https://api.staging.e-bot7.de
      token: ${self:provider.stage}/SAMPLE_APPLICATIONS/CREDENTIALS
